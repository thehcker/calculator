{"version":3,"sources":["BoilingMessage.js","TemperatureInput.js","Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["BoilingMessage","props","celcius","TemperatureInput","handleChange","bind","e","this","onTemperatureChange","target","value","temperature","onChange","Component","fieldName","c","f","Calculator","handleCelciusChange","handleFahrenheightChange","state","scale","setState","convert","input","parseFloat","Number","isNaN","tempVal","Math","round","toString","tryConvert","toCelcius","fahrenheight","toFahrenheight","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAAe,SAASA,EAAeC,GACrC,OAAOA,EAAMC,SAAW,IAAM,kBAAoB,sB,WCA/BC,E,kDACnB,WAAYF,GAAQ,IAAD,8BACjB,cAAMA,IACDG,aAAe,EAAKA,aAAaC,KAAlB,gBAFH,E,gDAKnB,SAAaC,GACXC,KAAKN,MAAMO,oBAAoBF,EAAEG,OAAOC,S,oBAG1C,WACE,OACE,8BACE,uBAAOA,MAAOH,KAAKN,MAAMU,YAAaC,SAAUL,KAAKH,qB,GAbfS,aCGxCC,EAAY,CAChBC,EAAG,UACHC,EAAG,gBAEgBC,E,kDACnB,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IACDiB,oBAAsB,EAAKA,oBAAoBb,KAAzB,gBAC3B,EAAKc,yBAA2B,EAAKA,yBAAyBd,KAA9B,gBAChC,EAAKe,MAAQ,CAAEC,MAAO,IAAKV,YAAa,IAJvB,E,uDAMnB,SAAoBA,GAClBJ,KAAKe,SAAS,CACZD,MAAO,IACPV,kB,sCAGJ,SAAyBA,GACvBJ,KAAKe,SAAS,CACZD,MAAO,IACPV,kB,uBAGJ,SAAUA,GACR,OAA6B,GAApBA,EAAc,IAAW,I,4BAEpC,SAAeA,GACb,OAAsB,EAAdA,EAAmB,EAAI,K,wBAEjC,SAAWA,EAAaY,GACtB,IAAMC,EAAQC,WAAWd,GACzB,GAAIe,OAAOC,MAAMH,GACf,MAAO,GAET,IAAMI,EAAUL,EAAQC,GAExB,OADgBK,KAAKC,MAAgB,IAAVF,GAAkB,KAC9BG,a,oBAEjB,WACE,IAAMpB,EAAcJ,KAAKa,MAAMT,YACzBU,EAAQd,KAAKa,MAAMC,MACnBnB,EACM,MAAVmB,EACId,KAAKyB,WAAWrB,EAAaJ,KAAK0B,WAClCtB,EACAuB,EACM,MAAVb,EACId,KAAKyB,WAAWrB,EAAaJ,KAAK4B,gBAClCxB,EACN,OACE,qCACE,iCACE,yDAA4BG,EAAUO,QAExC,8BACE,cAAC,EAAD,CACEA,MAAM,IACNV,YAAaT,EACbM,oBAAqBD,KAAKW,wBAI9B,8BACE,cAAC,EAAD,CACEG,MAAM,IACNV,YAAauB,EACb1B,oBAAqBD,KAAKY,6BAG9B,cAACnB,EAAD,CAAgBE,QAASuB,WAAWvB,Y,GAjEJW,aCDzBuB,MAJf,WACE,OAAO,cAAC,EAAD,KCQMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0bf65fee.chunk.js","sourcesContent":["export default function BoilingMessage(props) {\r\n  return props.celcius >= 100 ? \"Water Will Boil\" : \"Water Will Not Boil\";\r\n}\r\n","import React, { Component } from \"react\";\r\nexport default class TemperatureInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.props.onTemperatureChange(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input value={this.props.temperature} onChange={this.handleChange} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { Component } from \"react\";\r\nimport BoilingMessage from \"./BoilingMessage\";\r\nimport TemperatureInput from \"./TemperatureInput\";\r\n\r\nconst fieldName = {\r\n  c: \"Celcius\",\r\n  f: \"Fahrenheight\"\r\n};\r\nexport default class Calculator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleCelciusChange = this.handleCelciusChange.bind(this);\r\n    this.handleFahrenheightChange = this.handleFahrenheightChange.bind(this);\r\n    this.state = { scale: \"c\", temperature: \"\" };\r\n  }\r\n  handleCelciusChange(temperature) {\r\n    this.setState({\r\n      scale: \"c\",\r\n      temperature\r\n    });\r\n  }\r\n  handleFahrenheightChange(temperature) {\r\n    this.setState({\r\n      scale: \"f\",\r\n      temperature\r\n    });\r\n  }\r\n  toCelcius(temperature) {\r\n    return ((temperature - 32) * 5) / 9;\r\n  }\r\n  toFahrenheight(temperature) {\r\n    return (temperature * 9) / 5 + 32;\r\n  }\r\n  tryConvert(temperature, convert) {\r\n    const input = parseFloat(temperature);\r\n    if (Number.isNaN(input)) {\r\n      return \"\";\r\n    }\r\n    const tempVal = convert(input);\r\n    const rounded = Math.round(tempVal * 1000) / 1000;\r\n    return rounded.toString();\r\n  }\r\n  render() {\r\n    const temperature = this.state.temperature;\r\n    const scale = this.state.scale;\r\n    const celcius =\r\n      scale === \"f\"\r\n        ? this.tryConvert(temperature, this.toCelcius)\r\n        : temperature;\r\n    const fahrenheight =\r\n      scale === \"c\"\r\n        ? this.tryConvert(temperature, this.toFahrenheight)\r\n        : temperature;\r\n    return (\r\n      <fieldset>\r\n        <legend>\r\n          <h3>Dispaly temperature in {fieldName[scale]}</h3>\r\n        </legend>\r\n        <div>\r\n          <TemperatureInput\r\n            scale=\"c\"\r\n            temperature={celcius}\r\n            onTemperatureChange={this.handleCelciusChange}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <TemperatureInput\r\n            scale=\"f\"\r\n            temperature={fahrenheight}\r\n            onTemperatureChange={this.handleFahrenheightChange}\r\n          />\r\n        </div>\r\n        <BoilingMessage celcius={parseFloat(celcius)} />\r\n      </fieldset>\r\n    );\r\n  }\r\n}\r\n","import \"./App.css\";\nimport Calculator from \"./Calculator\";\n\nfunction App() {\n  return <Calculator />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}